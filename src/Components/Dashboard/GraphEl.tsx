import { P } from '@undp-data/undp-design-system-react';
import {
  DataTableColumnDataType,
  GraphConfigurationDataType,
  GraphSettingsDataType,
  GraphType,
} from '../../Types';
import {
  validateDataSchema,
  validateSettingsSchema,
} from '../../Utils/validateSchema';
import { AnimatedHorizontalBarChart } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedBarChart';
import { AnimatedHorizontalGroupedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedGroupedBarGraph';
import { AnimatedHorizontalStackedBarChart } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedStackedBarChart';
import { HorizontalGroupedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/GroupedBarGraph';
import { HorizontalBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/SimpleBarGraph';
import { HorizontalStackedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/StackedBarGraph';
import { AnimatedVerticalBarChart } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedBarChart';
import { AnimatedVerticalGroupedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedGroupedBarGraph';
import { AnimatedVerticalStackedBarChart } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedStackedBarChart';
import { VerticalGroupedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/GroupedBarGraph';
import { VerticalBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/SimpleBarGraph';
import { VerticalStackedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/StackedBarGraph';
import { HorizontalBeeSwarmChart } from '../Graphs/BeeSwarmChart/HorizontalBeeSwarmChart';
import { VerticalBeeSwarmChart } from '../Graphs/BeeSwarmChart/VerticalBeeSwarmChart';
import { AnimatedButterflyChart } from '../Graphs/ButterflyChart/AnimatedButterflyChart';
import { ButterflyChart } from '../Graphs/ButterflyChart/SimpleButterflyChart';
import { CirclePackingGraph } from '../Graphs/CirclePackingGraph';
import { DataTable } from '../Graphs/DataTable';
import { DonutChart } from '../Graphs/DonutChart';
import { AnimatedHorizontalDumbbellChart } from '../Graphs/DumbbellChart/HorizontalDumbbellChart/AnimatedDumbbellChart';
import { HorizontalDumbbellChart } from '../Graphs/DumbbellChart/HorizontalDumbbellChart/SimpleDumbbellChart';
import { AnimatedVerticalDumbbellChart } from '../Graphs/DumbbellChart/VerticalDumbbellChart/AnimatedDumbbellChart';
import { VerticalDumbbellChart } from '../Graphs/DumbbellChart/VerticalDumbbellChart/SimpleDumbbellChart';
import { HeatMap } from '../Graphs/HeatMap';
import { Histogram } from '../Graphs/Histogram';
import { DualAxisLineChart } from '../Graphs/LineCharts/DualAxisLineChart';
import { SimpleLineChart } from '../Graphs/LineCharts/LineChart';
import { MultiLineChart } from '../Graphs/LineCharts/MultiLineChart';
import { SparkLine } from '../Graphs/LineCharts/SparkLine';
import { AnimatedBiVariantMap } from '../Graphs/Maps/BiVariateMap/AnimatedBiVariateMap';
import { BiVariantMap } from '../Graphs/Maps/BiVariateMap/SimpleBiVariateMap';
import { AnimatedChoroplethMap } from '../Graphs/Maps/ChoroplethMap/AnimatedChoroplethMap';
import { ChoroplethMap } from '../Graphs/Maps/ChoroplethMap/SimpleChoroplethMap';
import { AnimatedDotDensityMap } from '../Graphs/Maps/DotDensityMap/AnimatedDotDensityMap';
import { DotDensityMap } from '../Graphs/Maps/DotDensityMap/SimpleDotDensityMap';
import { GeoHubCompareMaps } from '../Graphs/Maps/GeoHubCompareMaps';
import { GeoHubMap } from '../Graphs/Maps/GeoHubMap';
import { ParetoChart } from '../Graphs/ParetoChart';
import { AnimatedScatterPlot } from '../Graphs/ScatterPlot/AnimatedScatterPlot';
import { ScatterPlot } from '../Graphs/ScatterPlot/SimpleScatterPlot';
import { SlopeChart } from '../Graphs/SlopeChart';
import { AreaChart } from '../Graphs/StackedAreaChart';
import { StatCardFromData } from '../Graphs/StatCard/StatCardFromData';
import { HorizontalStripChart } from '../Graphs/StripChart/HorizontalStripChart';
import { VerticalStripChart } from '../Graphs/StripChart/VerticalStripChart';
import { TreeMapGraph } from '../Graphs/TreeMapGraph';
import { UnitChart } from '../Graphs/UnitChart';
import { getValues } from '../../Utils/getValues';
import { DifferenceLineChart } from '../Graphs/LineCharts/DifferenceLineChart';
import { UNDPColorModule } from '../ColorPalette';
import { GeoHubMapWithLayerSelection } from '../Graphs/Maps/GeoHubMapWithLayerSelection';
import { SankeyChart } from '../Graphs/SankeyChart';
import { LineChartWithConfidenceInterval } from '../Graphs/LineCharts/LineChartWithConfidenceInterval';
import { DataCards } from '../Graphs/DataCards';

interface Props {
  graph: GraphType;
  graphData: any;
  settings?: GraphSettingsDataType;
  debugMode?: boolean;
  graphDataConfiguration?: GraphConfigurationDataType[];
  readableHeader: {
    value: string;
    label: string;
  }[];
  updateFilters?: (_d: string) => void;
}

function GraphEl(props: Props) {
  const {
    settings,
    graph,
    graphData,
    debugMode,
    graphDataConfiguration,
    readableHeader,
    updateFilters,
  } = props;
  if (debugMode) {
    // eslint-disable-next-line no-console
    console.log(`Graph: ${graph}`);
    // eslint-disable-next-line no-console
    console.log('Transformed data:', graphData);
    // eslint-disable-next-line no-console
    console.log('Settings:', settings);
  }
  if (typeof graphData === 'string')
    return (
      <div
        className={`flex my-0 mx-auto grow flex-col justify-center ${
          settings?.width ? 'w-fit' : 'w-full'
        }`}
        style={{
          height: 'inherit',
        }}
      >
        <P
          size='sm'
          marginBottom='none'
          className='p-2 text-center'
          style={{
            color: UNDPColorModule[settings?.mode || 'light'].alerts.darkRed,
          }}
        >
          {graphData}
        </P>
      </div>
    );
  const graphComponents: Record<GraphType, React.ElementType | null> = {
    horizontalBarChart: HorizontalBarGraph,
    horizontalGroupedBarChart: HorizontalGroupedBarGraph,
    horizontalStackedBarChart: HorizontalStackedBarGraph,
    verticalBarChart: VerticalBarGraph,
    verticalGroupedBarChart: VerticalGroupedBarGraph,
    verticalStackedBarChart: VerticalStackedBarGraph,
    lineChart: SimpleLineChart,
    dualAxisLineChart: DualAxisLineChart,
    multiLineChart: MultiLineChart,
    stackedAreaChart: AreaChart,
    choroplethMap: ChoroplethMap,
    biVariateChoroplethMap: BiVariantMap,
    dotDensityMap: DotDensityMap,
    donutChart: DonutChart,
    slopeChart: SlopeChart,
    scatterPlot: ScatterPlot,
    horizontalDumbbellChart: HorizontalDumbbellChart,
    verticalDumbbellChart: VerticalDumbbellChart,
    treeMap: TreeMapGraph,
    circlePacking: CirclePackingGraph,
    heatMap: HeatMap,
    horizontalStripChart: HorizontalStripChart,
    verticalStripChart: VerticalStripChart,
    horizontalBeeSwarmChart: HorizontalBeeSwarmChart,
    verticalBeeSwarmChart: VerticalBeeSwarmChart,
    butterflyChart: ButterflyChart,
    histogram: Histogram,
    sparkLine: SparkLine,
    paretoChart: ParetoChart,
    dataTable: DataTable,
    statCard: StatCardFromData,
    geoHubCompareMap: GeoHubCompareMaps,
    geoHubMap: GeoHubMap,
    unitChart: UnitChart,
    animatedScatterPlot: AnimatedScatterPlot,
    animatedHorizontalBarChart: AnimatedHorizontalBarChart,
    animatedHorizontalStackedBarChart: AnimatedHorizontalStackedBarChart,
    animatedHorizontalGroupedBarChart: AnimatedHorizontalGroupedBarGraph,
    animatedVerticalBarChart: AnimatedVerticalBarChart,
    animatedVerticalStackedBarChart: AnimatedVerticalStackedBarChart,
    animatedVerticalGroupedBarChart: AnimatedVerticalGroupedBarGraph,
    animatedChoroplethMap: AnimatedChoroplethMap,
    animatedBiVariateChoroplethMap: AnimatedBiVariantMap,
    animatedDotDensityMap: AnimatedDotDensityMap,
    animatedHorizontalDumbbellChart: AnimatedHorizontalDumbbellChart,
    animatedVerticalDumbbellChart: AnimatedVerticalDumbbellChart,
    animatedButterflyChart: AnimatedButterflyChart,
    differenceLineChart: DifferenceLineChart,
    geoHubMapWithLayerSelection: GeoHubMapWithLayerSelection,
    sankeyChart: SankeyChart,
    lineChartWithConfidenceInterval: LineChartWithConfidenceInterval,
    dataCards: DataCards,
  };
  const getGraphProps = (graphType: GraphType) => {
    switch (graphType) {
      case 'horizontalBarChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle,
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          height: settings?.height,
          width: settings?.width,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          labelOrder: settings?.labelOrder,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          ariaLabel: settings?.ariaLabel,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.label);
            }
          },
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'horizontalGroupedBarChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          labelOrder: settings?.labelOrder,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          maxBarThickness: settings?.maxBarThickness,
          ariaLabel: settings?.ariaLabel,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'horizontalStackedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          labelOrder: settings?.labelOrder,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          sortParameter: settings?.sortParameter,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'verticalBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          labelOrder: settings?.labelOrder,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          ariaLabel: settings?.ariaLabel,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.label);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'verticalGroupedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          labelOrder: settings?.labelOrder,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          maxBarThickness: settings?.maxBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'verticalStackedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          labelOrder: settings?.labelOrder,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          sortParameter: settings?.sortParameter,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedHorizontalBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          height: settings?.height,
          width: settings?.width,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          autoSort: settings?.autoSort,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedHorizontalGroupedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedHorizontalStackedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          sortParameter: settings?.sortParameter,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedVerticalBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          autoSort: settings?.autoSort,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedVerticalGroupedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedVerticalStackedBarChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'size',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          sortParameter: settings?.sortParameter,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'lineChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphID: settings?.graphID,
          color: settings?.color as string | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
          strokeWidth: settings?.strokeWidth,
          showDots: settings?.showDots,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          regressionLine: settings?.regressionLine,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          yAxisTitle: settings?.yAxisTitle,
          noOfYTicks: settings?.noOfYTicks,
          minDate: settings?.minDate,
          maxDate: settings?.maxDate,
        };
      case 'lineChartWithConfidenceInterval':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphID: settings?.graphID,
          lineColor: settings?.lineColor,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
          strokeWidth: settings?.strokeWidth,
          showDots: settings?.showDots,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          regressionLine: settings?.regressionLine,
          ariaLabel: settings?.ariaLabel,
          showIntervalDots: settings?.showIntervalDots,
          showIntervalValues: settings?.showIntervalValues,
          intervalLineStrokeWidth: settings?.intervalLineStrokeWidth,
          intervalLineColors: settings?.intervalLineColors,
          intervalAreaColor: settings?.intervalAreaColor,
          intervalAreaOpacity: settings?.intervalAreaOpacity,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          yAxisTitle: settings?.yAxisTitle,
          noOfYTicks: settings?.noOfYTicks,
          minDate: settings?.minDate,
          maxDate: settings?.maxDate,
          colorLegendTitle: settings?.colorLegendTitle,
          colorLegendColors: settings?.colorLegendColors,
          colorLegendDomains: settings?.colorLegendDomains,
        };
      case 'dualAxisLineChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          lineTitles: settings?.lineTitles || [
            getValues('y1', graphDataConfiguration || [], readableHeader || []),
            getValues('y2', graphDataConfiguration || [], readableHeader || []),
          ],
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          lineColors: settings?.lineColors,
          sameAxes: settings?.sameAxes,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
          strokeWidth: settings?.strokeWidth,
          showDots: settings?.showDots,
          colorLegendTitle: settings?.colorLegendTitle,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          noOfYTicks: settings?.noOfYTicks,
          minDate: settings?.minDate,
          maxDate: settings?.maxDate,
          lineSuffixes: settings?.lineSuffixes,
          linePrefixes: settings?.linePrefixes,
        };
      case 'multiLineChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          labels:
            settings?.labels ||
            (getValues(
              'y',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          showValues: settings?.showValues,
          relativeHeight: settings?.relativeHeight,
          showColorLegendAtTop: settings?.showColorLegendAtTop,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          highlightedLines: settings?.highlightedLines,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
          strokeWidth: settings?.strokeWidth,
          showDots: settings?.showDots,
          colorLegendTitle: settings?.colorLegendTitle,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          yAxisTitle: settings?.yAxisTitle,
          noOfYTicks: settings?.noOfYTicks,
          minDate: settings?.minDate,
          maxDate: settings?.maxDate,
        };
      case 'differenceLineChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          lineColors: settings?.colors as [string, string] | undefined,
          diffAreaColors: settings?.diffAreaColors,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          labels: settings?.labels || [
            getValues('y1', graphDataConfiguration || [], readableHeader || []),
            getValues('y2', graphDataConfiguration || [], readableHeader || []),
          ],
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          showValues: settings?.showValues,
          relativeHeight: settings?.relativeHeight,
          showColorLegendAtTop: settings?.showColorLegendAtTop,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
          strokeWidth: settings?.strokeWidth,
          showDots: settings?.showDots,
          colorLegendTitle: settings?.colorLegendTitle,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          yAxisTitle: settings?.yAxisTitle,
          noOfYTicks: settings?.noOfYTicks,
          minDate: settings?.minDate,
          maxDate: settings?.maxDate,
        };
      case 'stackedAreaChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'y',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          colorLegendTitle: settings?.colorLegendTitle,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          relativeHeight: settings?.relativeHeight,
          bottomMargin: settings?.bottomMargin,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | string | null, number | string | null]
            | undefined,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          language: settings?.language,
          minHeight: settings?.minHeight,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          yAxisTitle: settings?.yAxisTitle,
          noOfYTicks: settings?.noOfYTicks,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
        };
      case 'choroplethMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          domain: settings?.domain as string[] | number[],
          colors: settings?.colors as string[] | undefined,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'x',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          categorical: settings?.categorical,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          padding: settings?.padding,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          mapProperty: settings?.mapProperty,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.countryCode);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'biVariateChoroplethMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          mapData: settings?.mapData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          xColorLegendTitle:
            Object.keys(settings || {}).indexOf('xColorLegendTitle') !== -1
              ? settings?.xColorLegendTitle
              : getValues(
                  'x',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          yColorLegendTitle:
            Object.keys(settings || {}).indexOf('yColorLegendTitle') !== -1
              ? settings?.yColorLegendTitle
              : getValues(
                  'y',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          xDomain: settings?.xDomain as [number, number, number, number],
          yDomain: settings?.yDomain as [number, number, number, number],
          colors: settings?.colors as string[][] | undefined,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          padding: settings?.padding,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          isWorldMap: settings?.isWorldMap,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          mapProperty: settings?.mapProperty,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.countryCode);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'dotDensityMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          radius: settings?.radius,
          sources: settings?.sources,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          padding: settings?.padding,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'donutChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          mainText: settings?.mainText,
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          subNote: settings?.subNote,
          footNote: settings?.footNote,
          radius: settings?.radius,
          strokeWidth: settings?.strokeWidth,
          graphLegend: settings?.graphLegend,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          colorDomain: settings?.colorDomain,
          sortData: settings?.sortData,
          language: settings?.language,
          width: settings?.width,
          height: settings?.height,
          minHeight: settings?.minHeight,
          relativeHeight: settings?.relativeHeight,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          ariaLabel: settings?.ariaLabel,
          legendMaxWidth: settings?.legendMaxWidth,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.label);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'slopeChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          radius: settings?.radius,
          axisTitle: settings?.axisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          fillContainer: settings?.fillContainer,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'scatterPlot':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          radius: settings?.radius,
          xAxisTitle: settings?.xAxisTitle,
          yAxisTitle: settings?.yAxisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refXValues: settings?.refXValues,
          refYValues: settings?.refYValues,
          highlightedDataPoints: settings?.highlightedDataPoints,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null, number | null, number | null]
            | undefined,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxRadiusValue: settings?.maxRadiusValue,
          maxXValue: settings?.maxXValue,
          minXValue: settings?.minXValue,
          maxYValue: settings?.maxYValue,
          minYValue: settings?.minYValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          regressionLine: settings?.regressionLine,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          noOfXTicks: settings?.noOfXTicks,
          noOfYTicks: settings?.noOfYTicks,
          labelColor: settings?.labelColor,
          xSuffix: settings?.xSuffix,
          ySuffix: settings?.ySuffix,
          xPrefix: settings?.xPrefix,
          yPrefix: settings?.yPrefix,
        };
      case 'horizontalDumbbellChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'x',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'verticalDumbbellChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'x',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          maxNumberOfBars: settings?.maxNumberOfBars,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'treeMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          showValues: settings?.showValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.label);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'circlePacking':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          showValues: settings?.showValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          radius: settings?.radius,
          maxRadiusValue: settings?.maxRadiusValue,
          onSeriesMouseClick: (el: any) => {
            if (updateFilters) {
              updateFilters(el.label);
            }
          },
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'heatMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          scaleType: settings?.scaleType,
          domain: settings?.domain as string[] | number[],
          showColumnLabels: settings?.showColumnLabels,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showRowLabels: settings?.showRowLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          noDataColor: settings?.noDataColor,
          showColorScale: settings?.showColorScale,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          fillContainer: settings?.fillContainer,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'horizontalStripChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          stripType: settings?.stripType,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          radius: settings?.radius,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showAxis: settings?.showAxis,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          prefix: settings?.prefix,
          suffix: settings?.suffix,
          language: settings?.language,
          minHeight: settings?.minHeight,
          highlightColor: settings?.highlightColor,
          dotOpacity: settings?.dotOpacity,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'verticalStripChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          radius: settings?.radius,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showAxis: settings?.showAxis,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          prefix: settings?.prefix,
          suffix: settings?.suffix,
          stripType: settings?.stripType,
          language: settings?.language,
          minHeight: settings?.minHeight,
          highlightColor: settings?.highlightColor,
          dotOpacity: settings?.dotOpacity,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'horizontalBeeSwarmChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          radius: settings?.radius,
          maxRadiusValue: settings?.maxRadiusValue,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'verticalBeeSwarmChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          radius: settings?.radius,
          maxRadiusValue: settings?.maxRadiusValue,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'butterflyChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          leftBarTitle:
            Object.keys(settings || {}).indexOf('leftBarTitle') !== -1
              ? settings?.leftBarTitle
              : getValues(
                  'leftBar',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          rightBarTitle:
            Object.keys(settings || {}).indexOf('rightBarTitle') !== -1
              ? settings?.rightBarTitle
              : getValues(
                  'rightBar',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColors: settings?.barColors,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showTicks: settings?.showTicks,
          showValues: settings?.showValues,
          centerGap: settings?.centerGap,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showColorScale: settings?.showColorScale,
          refValues: settings?.refValues,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'histogram':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          color: settings?.color,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          maxValue: settings?.maxValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          numberOfBins: settings?.numberOfBins,
          truncateBy: settings?.truncateBy,
          donutStrokeWidth: settings?.donutStrokeWidth,
          sortData: settings?.sortData,
          barGraphLayout: settings?.barGraphLayout,
          graphType: settings?.graphType,
          language: settings?.language,
          minHeight: settings?.minHeight,
          maxBarThickness: settings?.maxBarThickness,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          detailsOnClick: settings?.detailsOnClick,
        };
      case 'sparkLine':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          color: settings?.color as string | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          dateFormat: settings?.dateFormat,
          area: settings?.area,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'paretoChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          barTitle:
            Object.keys(settings || {}).indexOf('barTitle') !== -1
              ? settings?.barTitle
              : getValues(
                  'barTitle',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          lineTitle:
            Object.keys(settings || {}).indexOf('lineTitle') !== -1
              ? settings?.lineTitle
              : getValues(
                  'lineTitle',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColor: settings?.barColor,
          lineColor: settings?.lineColor,
          sameAxes: settings?.sameAxes,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          showLabels: settings?.showLabels,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          noOfYTicks: settings?.noOfYTicks,
          lineSuffix: settings?.lineSuffix,
          barSuffix: settings?.barSuffix,
          linePrefix: settings?.lineSuffix,
          barPrefix: settings?.barPrefix,
        };
      case 'dataTable':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          graphID: settings?.graphID,
          width: settings?.width,
          height: settings?.height,
          columnData: (settings?.columnData || []) as DataTableColumnDataType[],
          data: graphData,
          language: settings?.language,
          ariaLabel: settings?.ariaLabel,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
        };
      case 'statCard':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          year: settings?.year,
          data: graphData,
          graphTitle: settings?.graphTitle || '',
          graphDescription: settings?.graphDescription,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources || [],
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          graphID: settings?.graphID,
          aggregationMethod: settings?.aggregationMethod,
          language: settings?.language,
          minHeight: settings?.minHeight,
          countOnly: settings?.countOnly,
          ariaLabel: settings?.ariaLabel,
          textBackground: settings?.textBackground,
          headingFontSize: settings?.headingFontSize,
          centerAlign: settings?.centerAlign,
          verticalAlign: settings?.verticalAlign,
        };
      case 'geoHubCompareMap':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          width: settings?.width,
          height: settings?.height,
          relativeHeight: settings?.relativeHeight,
          graphID: settings?.graphID,
          mapStyles: settings?.mapStyles as [string, string],
          center: settings?.center,
          zoomLevel: settings?.zoomLevel,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
        };
      case 'geoHubMap':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          mapStyle: settings?.mapStyle,
          center: settings?.center,
          zoomLevel: settings?.zoomLevel,
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          width: settings?.width,
          height: settings?.height,
          relativeHeight: settings?.relativeHeight,
          graphID: settings?.graphID,
          language: settings?.language,
          minHeight: settings?.minHeight,
          includeLayers: settings?.includeLayers,
          excludeLayers: settings?.excludeLayers,
          ariaLabel: settings?.ariaLabel,
        };
      case 'geoHubMapWithLayerSelection':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          mapStyle: settings?.mapStyle,
          center: settings?.center,
          zoomLevel: settings?.zoomLevel,
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          width: settings?.width,
          height: settings?.height,
          relativeHeight: settings?.relativeHeight,
          graphID: settings?.graphID,
          language: settings?.language,
          minHeight: settings?.minHeight,
          layerSelection: settings?.layerSelection,
          excludeLayers: settings?.excludeLayers,
          ariaLabel: settings?.ariaLabel,
        };
      case 'unitChart':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          totalNoOfDots: settings?.totalNoOfDots,
          gridSize: settings?.gridSize,
          unitPadding: settings?.unitPadding,
          size: settings?.size,
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          colors: settings?.colors as string[] | undefined,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          graphLegend: settings?.graphLegend,
          showStrokeForWhiteDots: settings?.showStrokeForWhiteDots,
          note: settings?.note,
          data: graphData,
          width: settings?.width,
          height: settings?.height,
          minHeight: settings?.minHeight,
          relativeHeight: settings?.relativeHeight,
          ariaLabel: settings?.ariaLabel,
        };
      case 'animatedBiVariateChoroplethMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          mapData: settings?.mapData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          xColorLegendTitle:
            Object.keys(settings || {}).indexOf('xColorLegendTitle') !== -1
              ? settings?.xColorLegendTitle
              : getValues(
                  'x',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          yColorLegendTitle:
            Object.keys(settings || {}).indexOf('yColorLegendTitle') !== -1
              ? settings?.yColorLegendTitle
              : getValues(
                  'y',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          xDomain: settings?.xDomain as [number, number, number, number],
          yDomain: settings?.yDomain as [number, number, number, number],
          colors: settings?.colors as string[][] | undefined,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          padding: settings?.padding,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          isWorldMap: settings?.isWorldMap,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          mapProperty: settings?.mapProperty,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'animatedChoroplethMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          domain: settings?.domain as string[] | number[],
          colors: settings?.colors as string[] | undefined,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'x',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          categorical: settings?.categorical,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          padding: settings?.padding,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          mapProperty: settings?.mapProperty,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'animatedDotDensityMap':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          radius: settings?.radius,
          sources: settings?.sources,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          padding: settings?.padding,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'animatedButterflyChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          leftBarTitle:
            Object.keys(settings || {}).indexOf('leftBarTitle') !== -1
              ? settings?.leftBarTitle
              : getValues(
                  'leftBar',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          rightBarTitle:
            Object.keys(settings || {}).indexOf('rightBarTitle') !== -1
              ? settings?.rightBarTitle
              : getValues(
                  'rightBar',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColors: settings?.barColors,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showTicks: settings?.showTicks,
          showValues: settings?.showValues,
          centerGap: settings?.centerGap,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showColorScale: settings?.showColorScale,
          refValues: settings?.refValues,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'animatedHorizontalDumbbellChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'x',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedVerticalDumbbellChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain:
            settings?.colorDomain ||
            (getValues(
              'x',
              graphDataConfiguration || [],
              readableHeader || [],
            ) as string[]),
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          maxBarThickness: settings?.maxBarThickness,
          minBarThickness: settings?.minBarThickness,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          barAxisTitle: settings?.barAxisTitle,
          noOfTicks: settings?.noOfTicks,
          valueColor: settings?.valueColor,
        };
      case 'animatedScatterPlot':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle:
            Object.keys(settings || {}).indexOf('colorLegendTitle') !== -1
              ? settings?.colorLegendTitle
              : getValues(
                  'color',
                  graphDataConfiguration || [],
                  readableHeader || [],
                ),
          radius: settings?.radius,
          xAxisTitle: settings?.xAxisTitle,
          yAxisTitle: settings?.yAxisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refXValues: settings?.refXValues,
          refYValues: settings?.refYValues,
          highlightedDataPoints: settings?.highlightedDataPoints,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null, number | null, number | null]
            | undefined,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxRadiusValue: settings?.maxRadiusValue,
          maxXValue: settings?.maxXValue,
          minXValue: settings?.minXValue,
          maxYValue: settings?.maxYValue,
          minYValue: settings?.minYValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
          customHighlightAreaSettings: settings?.customHighlightAreaSettings,
          annotations: settings?.annotations,
          ariaLabel: settings?.ariaLabel,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
          noOfXTicks: settings?.noOfXTicks,
          noOfYTicks: settings?.noOfYTicks,
          labelColor: settings?.labelColor,
          xSuffix: settings?.xSuffix,
          ySuffix: settings?.ySuffix,
          xPrefix: settings?.xPrefix,
          yPrefix: settings?.yPrefix,
        };
      case 'sankeyChart':
        return {
          mode: settings?.mode,
          resetSelectionOnDoubleClick: settings?.resetSelectionOnDoubleClick,
          backgroundStyle: settings?.backgroundStyle || {},
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          width: settings?.width,
          height: settings?.height,
          sources: settings?.sources,
          showLabels: settings?.showLabels,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          padding: settings?.padding,
          backgroundColor: settings?.backgroundColor,
          tooltip: settings?.tooltip,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          relativeHeight: settings?.relativeHeight,
          showValues: settings?.showValues,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          fillContainer: settings?.fillContainer,
          language: settings?.language,
          minHeight: settings?.minHeight,
          ariaLabel: settings?.ariaLabel,
          sourceColors: settings?.sourceColors,
          targetColors: settings?.targetColors,
          sourceColorDomain: settings?.sourceColorDomain,
          targetColorDomain: settings?.targetColorDomain,
          nodePadding: settings?.nodePadding,
          nodeWidth: settings?.nodeWidth,
          highlightedSourceDataPoints: settings?.highlightedSourceDataPoints,
          highlightedTargetDataPoints: settings?.highlightedTargetDataPoints,
          defaultLinkOpacity: settings?.defaultLinkOpacity,
          sourceTitle: settings?.sourceTitle,
          targetTitle: settings?.targetTitle,
          animateLinks: settings?.animateLinks,
          sortNodes: settings?.sortNodes,
          detailsOnClick: settings?.detailsOnClick,
          tooltipBackgroundStyle: settings?.tooltipBackgroundStyle,
        };
      case 'dataCards':
        return {
          mode: settings?.mode,
          backgroundStyle: settings?.backgroundStyle || {},
          graphTitle: settings?.graphTitle,
          sources: settings?.sources,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          graphID: settings?.graphID,
          width: settings?.width,
          height: settings?.height,
          columnData: (settings?.columnData || []) as DataTableColumnDataType[],
          data: graphData,
          language: settings?.language,
          ariaLabel: settings?.ariaLabel,
          cardTemplate: settings?.cardTemplate,
          cardBackgroundColor: settings?.cardBackgroundColor,
          cardFilters: settings?.cardFilters || [],
          cardSortingOptions: settings?.cardSortingOptions,
          cardSearchColumns: settings?.cardSearchColumns,
          cardMinWidth: settings?.cardMinWidth,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          cardBackgroundStyle: settings?.cardBackgroundStyle,
          detailsOnClick: settings?.detailsOnClick,
          allowDataDownloadOnDetail: settings?.allowDataDownloadOnDetail,
          noOfItemsInAPage: settings?.noOfItemsInAPage,
        };
      default:
        return {};
    }
  };
  const GraphComponent = graphComponents[graph];
  const graphProps = getGraphProps(graph);
  return (
    <div
      className={`grow my-0 mx-auto flex flex-col h-inherit ${
        settings?.width ? 'w-fit' : 'w-full'
      } ${graph !== 'unitChart' ? 'justify-center' : 'justify-start'}`}
      style={{
        minHeight: 'inherit',
      }}
    >
      {validateSettingsSchema(getGraphProps(graph) || {}, graph).isValid &&
      validateDataSchema(graphData, graph).isValid &&
      GraphComponent ? (
        // eslint-disable-next-line react/jsx-props-no-spreading
        <GraphComponent {...graphProps} />
      ) : (
        <P
          size='sm'
          marginBottom='none'
          className='p-2 text-center'
          style={{
            color: UNDPColorModule[settings?.mode || 'light'].alerts.darkRed,
          }}
        >
          {GraphComponent
            ? validateSettingsSchema(settings || {}, graph).isValid
              ? `Error in data: ${validateDataSchema(graphData, graph).err}`
              : `Error in settings: ${
                  validateSettingsSchema(settings || {}, graph).err
                }`
            : `Invalid chart type: ${graph}`}
        </P>
      )}
    </div>
  );
}

export default GraphEl;
