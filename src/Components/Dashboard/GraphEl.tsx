import {
  DataTableColumnDataType,
  GraphSettingsDataType,
  GraphType,
} from '../../Types';
import {
  validateDataSchema,
  validateSettingsSchema,
} from '../../Utils/validateSchema';
import { AnimatedHorizontalBarChart } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedBarChart';
import { AnimatedHorizontalGroupedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedGroupedBarGraph';
import { AnimatedHorizontalStackedBarChart } from '../Graphs/BarGraph/HorizontalBarGraph/AnimatedStackedBarChart';
import { HorizontalGroupedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/GroupedBarGraph';
import { HorizontalBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/SimpleBarGraph';
import { HorizontalStackedBarGraph } from '../Graphs/BarGraph/HorizontalBarGraph/StackedBarGraph';
import { AnimatedVerticalBarChart } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedBarChart';
import { AnimatedVerticalGroupedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedGroupedBarGraph';
import { AnimatedVerticalStackedBarChart } from '../Graphs/BarGraph/VerticalBarGraph/AnimatedStackedBarChart';
import { VerticalGroupedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/GroupedBarGraph';
import { VerticalBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/SimpleBarGraph';
import { VerticalStackedBarGraph } from '../Graphs/BarGraph/VerticalBarGraph/StackedBarGraph';
import { HorizontalBeeSwarmChart } from '../Graphs/BeeSwarmChart/HorizontalBeeSwarmChart';
import { VerticalBeeSwarmChart } from '../Graphs/BeeSwarmChart/VerticalBeeSwarmChart';
import { AnimatedButterflyChart } from '../Graphs/ButterflyChart/AnimatedButterflyChart';
import { ButterflyChart } from '../Graphs/ButterflyChart/SimpleButterflyChart';
import { CirclePackingGraph } from '../Graphs/CirclePackingGraph';
import { DataTable } from '../Graphs/DataTable';
import { DonutChart } from '../Graphs/DonutChart';
import { AnimatedHorizontalDumbbellChart } from '../Graphs/DumbbellChart/HorizontalDumbbellChart/AnimatedDumbbellChart';
import { HorizontalDumbbellChart } from '../Graphs/DumbbellChart/HorizontalDumbbellChart/SimpleDumbbellChart';
import { AnimatedVerticalDumbbellChart } from '../Graphs/DumbbellChart/VerticalDumbbellChart/AnimatedDumbbellChart';
import { VerticalDumbbellChart } from '../Graphs/DumbbellChart/VerticalDumbbellChart/SimpleDumbbellChart';
import { HeatMap } from '../Graphs/HeatMap';
import { Histogram } from '../Graphs/Histogram';
import { DualAxisLineChart } from '../Graphs/LineCharts/DualAxisLineChart';
import { SimpleLineChart } from '../Graphs/LineCharts/LineChart';
import { MultiLineChart } from '../Graphs/LineCharts/MultiLineChart';
import { SparkLine } from '../Graphs/LineCharts/SparkLine';
import { AnimatedBiVariantMap } from '../Graphs/Maps/BiVariateMap/AnimatedBiVariateMap';
import { BiVariantMap } from '../Graphs/Maps/BiVariateMap/SimpleBiVariateMap';
import { AnimatedChoroplethMap } from '../Graphs/Maps/ChoroplethMap/AnimatedChoroplethMap';
import { ChoroplethMap } from '../Graphs/Maps/ChoroplethMap/SimpleChoroplethMap';
import { AnimatedDotDensityMap } from '../Graphs/Maps/DotDensityMap/AnimatedDotDensityMap';
import { DotDensityMap } from '../Graphs/Maps/DotDensityMap/SimpleDotDensityMap';
import { GeoHubCompareMaps } from '../Graphs/Maps/GeoHubCompareMaps';
import { GeoHubMap } from '../Graphs/Maps/GeoHubMap';
import { ParetoChart } from '../Graphs/ParetoChart';
import { AnimatedScatterPlot } from '../Graphs/ScatterPlot/AnimatedScatterPlot';
import { ScatterPlot } from '../Graphs/ScatterPlot/SimpleScatterPlot';
import { SlopeChart } from '../Graphs/SlopeChart';
import { AreaChart } from '../Graphs/StackedAreaChart';
import { StatCardFromData } from '../Graphs/StatCard/StatCardFromData';
import { HorizontalStripChart } from '../Graphs/StripChart/HorizontalStripChart';
import { VerticalStripChart } from '../Graphs/StripChart/VerticalStripChart';
import { TreeMapGraph } from '../Graphs/TreeMapGraph';
import { UnitChart } from '../Graphs/UnitChart';

interface Props {
  graph: GraphType;
  graphData: any;
  settings?: GraphSettingsDataType;
}

function GraphEl(props: Props) {
  const { settings, graph, graphData } = props;
  if (typeof graphData === 'string')
    return (
      <div
        style={{
          flexGrow: 1,
          margin: '0 auto',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          height: 'inherit',
          width: settings?.width ? 'fit-content' : '100%',
        }}
      >
        <p
          className='undp-viz-typography'
          style={{
            textAlign: 'center',
            padding: '0.5rem',
            color: '#D12800',
            fontSize: '0.875rem',
          }}
        >
          {graphData}
        </p>
      </div>
    );
  const graphComponents: Record<GraphType, React.ElementType | null> = {
    horizontalBarChart: HorizontalBarGraph,
    horizontalGroupedBarChart: HorizontalGroupedBarGraph,
    horizontalStackedBarChart: HorizontalStackedBarGraph,
    verticalBarChart: VerticalBarGraph,
    verticalGroupedBarChart: VerticalGroupedBarGraph,
    verticalStackedBarChart: VerticalStackedBarGraph,
    lineChart: SimpleLineChart,
    dualAxisLineChart: DualAxisLineChart,
    multiLineChart: MultiLineChart,
    stackedAreaChart: AreaChart,
    choroplethMap: ChoroplethMap,
    biVariateChoroplethMap: BiVariantMap,
    dotDensityMap: DotDensityMap,
    donutChart: DonutChart,
    slopeChart: SlopeChart,
    scatterPlot: ScatterPlot,
    horizontalDumbbellChart: HorizontalDumbbellChart,
    verticalDumbbellChart: VerticalDumbbellChart,
    treeMap: TreeMapGraph,
    circlePacking: CirclePackingGraph,
    heatMap: HeatMap,
    horizontalStripChart: HorizontalStripChart,
    verticalStripChart: VerticalStripChart,
    horizontalBeeSwarmChart: HorizontalBeeSwarmChart,
    verticalBeeSwarmChart: VerticalBeeSwarmChart,
    butterflyChart: ButterflyChart,
    histogram: Histogram,
    sparkLine: SparkLine,
    paretoChart: ParetoChart,
    dataTable: DataTable,
    statCard: StatCardFromData,
    geoHubCompareMap: GeoHubCompareMaps,
    geoHubMap: GeoHubMap,
    unitChart: UnitChart,
    animatedScatterPlot: AnimatedScatterPlot,
    animatedHorizontalBarChart: AnimatedHorizontalBarChart,
    animatedHorizontalStackedBarChart: AnimatedHorizontalStackedBarChart,
    animatedHorizontalGroupedBarChart: AnimatedHorizontalGroupedBarGraph,
    animatedVerticalBarChart: AnimatedVerticalBarChart,
    animatedVerticalStackedBarChart: AnimatedVerticalStackedBarChart,
    animatedVerticalGroupedBarChart: AnimatedVerticalGroupedBarGraph,
    animatedChoroplethMap: AnimatedChoroplethMap,
    animatedBiVariateChoroplethMap: AnimatedBiVariantMap,
    animatedDotDensityMap: AnimatedDotDensityMap,
    animatedHorizontalDumbbellChart: AnimatedHorizontalDumbbellChart,
    animatedVerticalDumbbellChart: AnimatedVerticalDumbbellChart,
    animatedButterflyChart: AnimatedButterflyChart,
  };
  const getGraphProps = (graphType: GraphType) => {
    switch (graphType) {
      case 'horizontalBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          height: settings?.height,
          width: settings?.width,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          labelOrder: settings?.labelOrder,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'horizontalGroupedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          labelOrder: settings?.labelOrder,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'horizontalStackedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          labelOrder: settings?.labelOrder,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'verticalBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          labelOrder: settings?.labelOrder,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'verticalGroupedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          labelOrder: settings?.labelOrder,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'verticalStackedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          labelOrder: settings?.labelOrder,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'animatedHorizontalBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          height: settings?.height,
          width: settings?.width,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          autoSort: settings?.autoSort,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedHorizontalGroupedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedHorizontalStackedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedVerticalBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          sortData: settings?.sortData,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          autoSort: settings?.autoSort,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedVerticalGroupedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          showLabels: settings?.showLabels,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedVerticalStackedBarChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'lineChart':
        return {
          data: graphData,
          graphID: settings?.graphID,
          color: settings?.color as string | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null]
            | undefined,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
        };
      case 'dualAxisLineChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          lineTitles: settings?.lineTitles,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          showValues: settings?.showValues,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          lineColors: settings?.lineColors,
          sameAxes: settings?.sameAxes,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null]
            | undefined,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
        };
      case 'multiLineChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          labels: settings?.labels as string[],
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          showValues: settings?.showValues,
          relativeHeight: settings?.relativeHeight,
          showColorLegendAtTop: settings?.showColorLegendAtTop,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null]
            | undefined,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          highlightedLines: settings?.highlightedLines,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          animateLine: settings?.animateLine,
        };
      case 'stackedAreaChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          noOfXTicks: settings?.noOfXTicks,
          dateFormat: settings?.dateFormat,
          colorDomain: settings?.colorDomain as string[],
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          colorLegendTitle: settings?.colorLegendTitle,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          relativeHeight: settings?.relativeHeight,
          bottomMargin: settings?.bottomMargin,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null]
            | undefined,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'choroplethMap':
        return {
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          domain: settings?.domain as string[] | number[],
          colors: settings?.colors as string[] | undefined,
          colorLegendTitle: settings?.colorLegendTitle,
          categorical: settings?.categorical,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          padding: settings?.padding,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          mapProperty: settings?.mapProperty,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'biVariateChoroplethMap':
        return {
          data: graphData,
          mapData: settings?.mapData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          xColorLegendTitle: settings?.xColorLegendTitle,
          yColorLegendTitle: settings?.yColorLegendTitle,
          xDomain: settings?.xDomain as [number, number, number, number],
          yDomain: settings?.yDomain as [number, number, number, number],
          colors: settings?.colors as string[][] | undefined,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          padding: settings?.padding,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          isWorldMap: settings?.isWorldMap,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          mapProperty: settings?.mapProperty,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'dotDensityMap':
        return {
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          radius: settings?.radius,
          source: settings?.source,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          padding: settings?.padding,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'donutChart':
        return {
          mainText: settings?.mainText,
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          graphDescription: settings?.graphDescription,
          sourceLink: settings?.sourceLink,
          subNote: settings?.subNote,
          footNote: settings?.footNote,
          radius: settings?.radius,
          strokeWidth: settings?.strokeWidth,
          graphLegend: settings?.graphLegend,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          colorDomain: settings?.colorDomain,
          sortData: settings?.sortData,
          rtl: settings?.rtl,
          language: settings?.language,
        };
      case 'slopeChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          radius: settings?.radius,
          axisTitle: settings?.axisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          fillContainer: settings?.fillContainer,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'scatterPlot':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          radius: settings?.radius,
          xAxisTitle: settings?.xAxisTitle,
          yAxisTitle: settings?.yAxisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refXValues: settings?.refXValues,
          refYValues: settings?.refYValues,
          highlightedDataPoints: settings?.highlightedDataPoints,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null, number | null, number | null]
            | undefined,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxRadiusValue: settings?.maxRadiusValue,
          maxXValue: settings?.maxXValue,
          minXValue: settings?.minXValue,
          maxYValue: settings?.maxYValue,
          minYValue: settings?.minYValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'horizontalDumbbellChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
        };
      case 'verticalDumbbellChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
        };
      case 'treeMap':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          showValues: settings?.showValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'circlePacking':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          showValues: settings?.showValues,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'heatMap':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          scaleType: settings?.scaleType,
          domain: settings?.domain as string[] | number[],
          showColumnLabels: settings?.showColumnLabels,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          truncateBy: settings?.truncateBy,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showValues: settings?.showValues,
          showRowLabels: settings?.showRowLabels,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          noDataColor: settings?.noDataColor,
          showColorScale: settings?.showColorScale,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          fillContainer: settings?.fillContainer,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'horizontalStripChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          stripType: settings?.stripType,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          radius: settings?.radius,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showAxis: settings?.showAxis,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          prefix: settings?.prefix,
          suffix: settings?.suffix,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          highlightColor: settings?.highlightColor,
          dotOpacity: settings?.dotOpacity,
          showNAColor: settings?.showNAColor,
        };
      case 'verticalStripChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          radius: settings?.radius,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          highlightedDataPoints: settings?.highlightedDataPoints,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showAxis: settings?.showAxis,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          prefix: settings?.prefix,
          suffix: settings?.suffix,
          stripType: settings?.stripType,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          highlightColor: settings?.highlightColor,
          dotOpacity: settings?.dotOpacity,
          showNAColor: settings?.showNAColor,
        };
      case 'horizontalBeeSwarmChart':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          radius: settings?.radius,
          maxRadiusValue: settings?.maxRadiusValue,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'verticalBeeSwarmChart':
        return {
          data: graphData,
          colors: settings?.colors as string | string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          showColorScale: settings?.showColorScale,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          radius: settings?.radius,
          maxRadiusValue: settings?.maxRadiusValue,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
        };
      case 'butterflyChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          leftBarTitle: settings?.leftBarTitle,
          rightBarTitle: settings?.rightBarTitle,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColors: settings?.barColors,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showTicks: settings?.showTicks,
          showValues: settings?.showValues,
          centerGap: settings?.centerGap,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showColorScale: settings?.showColorScale,
          refValues: settings?.refValues,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'histogram':
        return {
          data: graphData,
          color: settings?.color,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          maxValue: settings?.maxValue,
          tooltip: settings?.tooltip,
          refValues: settings?.refValues,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          numberOfBins: settings?.numberOfBins,
          truncateBy: settings?.truncateBy,
          donutStrokeWidth: settings?.donutStrokeWidth,
          sortData: settings?.sortData,
          barGraphLayout: settings?.barGraphLayout,
          graphType: settings?.graphType,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'sparkLine':
        return {
          data: graphData,
          color: settings?.color as string | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          dateFormat: settings?.dateFormat,
          areaId: settings?.areaId,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'paretoChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          barTitle: settings?.barTitle,
          lineTitle: settings?.lineTitle,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColor: settings?.barColor,
          lineColor: settings?.lineColor,
          sameAxes: settings?.sameAxes,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          showLabels: settings?.showLabels,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'dataTable':
        return {
          graphTitle: settings?.graphTitle,
          source: settings?.source,
          graphDescription: settings?.graphDescription,
          sourceLink: settings?.sourceLink,
          footNote: settings?.footNote,
          graphID: settings?.graphID,
          width: settings?.width,
          height: settings?.height,
          columnData: (settings?.columnData || []) as DataTableColumnDataType[],
          data: graphData,
          rtl: settings?.rtl,
          language: settings?.language,
        };
      case 'statCard':
        return {
          year: settings?.year,
          data: graphData,
          graphTitle: settings?.graphTitle || '',
          graphDescription: settings?.graphDescription,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source || '',
          sourceLink: settings?.sourceLink,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          graphID: settings?.graphID,
          aggregationMethod: settings?.aggregationMethod,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          countOnly: settings?.countOnly,
        };
      case 'geoHubCompareMap':
        return {
          graphTitle: settings?.graphTitle,
          source: settings?.source,
          graphDescription: settings?.graphDescription,
          sourceLink: settings?.sourceLink,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          width: settings?.width,
          height: settings?.height,
          relativeHeight: settings?.relativeHeight,
          graphID: settings?.graphID,
          mapStyles: settings?.mapStyles as [string, string],
          center: settings?.center,
          zoomLevel: settings?.zoomLevel,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'geoHubMap':
        return {
          mapStyle: settings?.mapStyle as string,
          center: settings?.center,
          zoomLevel: settings?.zoomLevel,
          graphTitle: settings?.graphTitle,
          source: settings?.source,
          graphDescription: settings?.graphDescription,
          sourceLink: settings?.sourceLink,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          width: settings?.width,
          height: settings?.height,
          relativeHeight: settings?.relativeHeight,
          graphID: settings?.graphID,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
        };
      case 'unitChart':
        return {
          totalNoOfDots: settings?.totalNoOfDots,
          gridSize: settings?.gridSize,
          fillContainer: settings?.fillContainer,
          unitPadding: settings?.unitPadding,
          size: settings?.size,
          graphTitle: settings?.graphTitle,
          source: settings?.source,
          colors: settings?.colors as string[] | undefined,
          graphDescription: settings?.graphDescription,
          sourceLink: settings?.sourceLink,
          footNote: settings?.footNote,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          graphLegend: settings?.graphLegend,
          showStrokeForWhiteDots: settings?.showStrokeForWhiteDots,
          note: settings?.note,
        };
      case 'animatedBiVariateChoroplethMap':
        return {
          data: graphData,
          mapData: settings?.mapData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          xColorLegendTitle: settings?.xColorLegendTitle,
          yColorLegendTitle: settings?.yColorLegendTitle,
          xDomain: settings?.xDomain as [number, number, number, number],
          yDomain: settings?.yDomain as [number, number, number, number],
          colors: settings?.colors as string[][] | undefined,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          padding: settings?.padding,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          isWorldMap: settings?.isWorldMap,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          mapProperty: settings?.mapProperty,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedChoroplethMap':
        return {
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          domain: settings?.domain as string[] | number[],
          colors: settings?.colors as string[] | undefined,
          colorLegendTitle: settings?.colorLegendTitle,
          categorical: settings?.categorical,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          relativeHeight: settings?.relativeHeight,
          padding: settings?.padding,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedCountryCodes: settings?.highlightedCountryCodes,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          mapProperty: settings?.mapProperty,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedDotDensityMap':
        return {
          graphTitle: settings?.graphTitle,
          mapData: settings?.mapData,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          radius: settings?.radius,
          source: settings?.source,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          data: graphData,
          scale: settings?.scale,
          centerPoint: settings?.centerPoint,
          backgroundColor: settings?.backgroundColor,
          mapBorderWidth: settings?.mapBorderWidth,
          mapNoDataColor: settings?.mapNoDataColor,
          mapBorderColor: settings?.mapBorderColor,
          padding: settings?.padding,
          showLabels: settings?.showLabels,
          relativeHeight: settings?.relativeHeight,
          isWorldMap: settings?.isWorldMap,
          tooltip: settings?.tooltip,
          showColorScale: settings?.showColorScale,
          zoomScaleExtend: settings?.zoomScaleExtend,
          zoomTranslateExtend: settings?.zoomTranslateExtend,
          graphID: settings?.graphID,
          highlightedDataPoints: settings?.highlightedDataPoints,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          showAntarctica: settings?.showAntarctica,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedButterflyChart':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          leftBarTitle: settings?.leftBarTitle,
          rightBarTitle: settings?.rightBarTitle,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          barColors: settings?.barColors,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          barPadding: settings?.barPadding,
          truncateBy: settings?.truncateBy,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          showTicks: settings?.showTicks,
          showValues: settings?.showValues,
          centerGap: settings?.centerGap,
          maxValue: settings?.maxValue,
          minValue: settings?.minValue,
          showColorScale: settings?.showColorScale,
          refValues: settings?.refValues,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedHorizontalDumbbellChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showValues: settings?.showValues,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedVerticalDumbbellChart':
        return {
          data: graphData,
          colors: settings?.colors as string[] | undefined,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          barPadding: settings?.barPadding,
          showTicks: settings?.showTicks,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          truncateBy: settings?.truncateBy,
          colorDomain: settings?.colorDomain as string[],
          colorLegendTitle: settings?.colorLegendTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          radius: settings?.radius,
          relativeHeight: settings?.relativeHeight,
          showValues: settings?.showValues,
          showLabels: settings?.showLabels,
          tooltip: settings?.tooltip,
          graphID: settings?.graphID,
          maxPositionValue: settings?.maxPositionValue,
          minPositionValue: settings?.minPositionValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          suffix: settings?.suffix,
          prefix: settings?.prefix,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          sortParameter: settings?.sortParameter,
          arrowConnector: settings?.arrowConnector,
          connectorStrokeWidth: settings?.connectorStrokeWidth,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      case 'animatedScatterPlot':
        return {
          data: graphData,
          graphTitle: settings?.graphTitle,
          graphDescription: settings?.graphDescription,
          footNote: settings?.footNote,
          sourceLink: settings?.sourceLink,
          width: settings?.width,
          height: settings?.height,
          source: settings?.source,
          showLabels: settings?.showLabels,
          colors: settings?.colors as string | string[] | undefined,
          colorDomain: settings?.colorDomain,
          colorLegendTitle: settings?.colorLegendTitle,
          radius: settings?.radius,
          xAxisTitle: settings?.xAxisTitle,
          yAxisTitle: settings?.yAxisTitle,
          backgroundColor: settings?.backgroundColor,
          padding: settings?.padding,
          leftMargin: settings?.leftMargin,
          rightMargin: settings?.rightMargin,
          topMargin: settings?.topMargin,
          bottomMargin: settings?.bottomMargin,
          relativeHeight: settings?.relativeHeight,
          tooltip: settings?.tooltip,
          refXValues: settings?.refXValues,
          refYValues: settings?.refYValues,
          highlightedDataPoints: settings?.highlightedDataPoints,
          highlightAreaSettings: settings?.highlightAreaSettings as
            | [number | null, number | null, number | null, number | null]
            | undefined,
          highlightAreaColor: settings?.highlightAreaColor,
          showColorScale: settings?.showColorScale,
          graphID: settings?.graphID,
          maxRadiusValue: settings?.maxRadiusValue,
          maxXValue: settings?.maxXValue,
          minXValue: settings?.minXValue,
          maxYValue: settings?.maxYValue,
          minYValue: settings?.minYValue,
          graphDownload: settings?.graphDownload,
          dataDownload: settings?.dataDownload,
          rtl: settings?.rtl,
          language: settings?.language,
          minHeight: settings?.minHeight,
          showNAColor: settings?.showNAColor,
          autoPlay: settings?.autoPlay,
          showOnlyActiveDate: settings?.showOnlyActiveDate,
          dateFormat: settings?.dateFormat,
        };
      default:
        return {};
    }
  };
  const GraphComponent = graphComponents[graph];
  const graphProps = getGraphProps(graph);
  return (
    <div
      style={{
        flexGrow: 1,
        margin: '0 auto',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        height: 'inherit',
        minHeight: 'inherit',
        width: settings?.width ? 'fit-content' : '100%',
      }}
    >
      {validateSettingsSchema(settings || {}, graph).isValid &&
      validateDataSchema(graphData, graph) &&
      GraphComponent ? (
        // eslint-disable-next-line react/jsx-props-no-spreading
        <GraphComponent {...graphProps} />
      ) : (
        <p
          className='undp-viz-typography'
          style={{
            textAlign: 'center',
            padding: '0.5rem',
            color: '#D12800',
            fontSize: '0.875rem',
          }}
        >
          {GraphComponent
            ? validateSettingsSchema(settings || {}, graph).isValid
              ? 'Data type in the source data is nor accurate'
              : validateSettingsSchema(settings || {}, graph).err
            : `Invalid chart type: ${graph}`}
        </p>
      )}
    </div>
  );
}

export default GraphEl;
